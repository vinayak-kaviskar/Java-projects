

intruction
projects
core java
:  
	java 8 features
	functional interface , anonymous class
	hashmap internal working ::  uses binary tree after a certain threshold otherwise still uses linked list internally: https://www.nagarro.com/en/blog/post/24/performance-improvement-for-hashmap-in-java-8
	String vs String new
	why do we say string is immutable
	Singlepattern vs singleton bean in spring
	single design pattern applications, how to achieve it
	how to make a class immutable
	marker interface,  what is serializable interface
	volatile keyword? used in multi threading, present in main memory and cached in thread local, but does not guarantee atomicity/threadsafe.
	transient keyword ? cannot be serialized
	static variables do they get serialized? NO
	why do we have to override hashcode and equals methods?
	when to prefer arraylist, and when to prefer linked list?		
	Is hashmap thread safe, why to use concurrent hashmap
	what is composition and aggregation in java?
		
threading
diff betn sleep and wait methods? yield method?
diff between runnable and callable method.
what is thread local class?
throwing exception for inherited methods?
		
		
Hibernate :
first level caching

	
Spring boot
	springboot vs Spring?
	scope of beans
	types of transaction propagations
	what are components involved in a microservice based architecture?
	few annotations in spring, and explain
	what is the use of qualifiers for beans ?
	
	***
	flow of a resp api. with anotations.
	design patterns usage
	hooks in springboot
	
	
unit testing:
mockito:  @InjectMocks vs @Mock
			mocking vs spying
	
AWS 
		resources you have dealt with in AWS?
		
Redis cache , how are u storing data


		
SQL 
2md highest salary	
		
	
	
	
SCOPES OF A BEAN (6)
singleton  single instance thoughout application
prototype every type a new bean is requested.
request  for every new request
session   for a http session
websocket for a websocket session.
application:  for the life cycle of servlet context, The application scope creates the bean instance for the lifecycle of a ServletContext.
This is similar to the singleton scope, but there is a very important difference with regards to the scope of the bean.
When beans are application scoped, the same instance of the bean is shared across multiple servlet-based applications running in the same ServletContext, while singleton scoped beans are scoped to a single application context only.




@Resource Anotation, its use?,  difference between this and @Autowired
	 
	 
	 
story to actual implementation
Code reviews?
Junit, code coverage, sonar qube,, spying vs mocking
cicd tool? exposure?
aws how is it deployed?
Rest API design ?
micro service architecture?



what is front controlller?
what is basic mvc flow?
what is method injection
what is difference between classs level lock and object lock?
what is AwareInterface?
can we add prototype bean in singleton bean?  Yes
can we have mltiple annotation on same method like @getmapping, @postmapping, @putMapping:: NO, Instead of multiple mapping annotations, use @RequestMapping with the method attribute:  @RequestMapping(value = "/example", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT})
what is Lock interface?
what all attributes are used to specify a foreign key in any relationship like @oneToMany?



What are features of java 17. (https://stacktips.com/articles/java-17-interview-questions-and-answers)
1. Sealed classes
2. Pattern matching in switch case and returning values from switch case:: detailed version wise evolution of switch case: https://medium.com/@javatechie/the-evolution-of-switch-statement-from-java-7-to-java-17-4b5eee8d29b7  
3. Pattern matching in instance of operator.
4. Use of Records lightweight dtos :: https://javatechonline.com/record-in-java-with-examples/
5. Improved random generator interface with different algorithms.
6. Text Blocks: Initializing multi-line strings by using 3 double quotes, like we have in python.


Steps to make Immutable class
	Declare the class as final, so it cannot be extended.
	Declare all fields as private and final, so they cannot be modified outside the constructor.
	Do not provide any setter methods for the fields.
	If any of the fields are mutable, return a copy of them instead of returning the original object.


Hashmap Working:
Each bucket has a linked list of nodes.
If hashcollision occurs and keys are not equal, then values are stored in the linkedlist which is at same index.
If number of nodes is beyond 8 in the linked list the hashmap used Red-Black Tree to optimise the performance.
Load factor is 0.75, default size is 16, if load factor is reached, the size is doubled and the values are re-indexed.

Composition VS Aggregation
Aggregation:
Aggregation is a looser form of association. It represents a "has-a" relationship where the contained object can exist independently of the container object.
In aggregation, the lifetime of the contained objects is not managed by the container object. The contained objects can exist outside the container and can be shared among multiple containers.
Composition:
Composition is a stronger form of aggregation where the lifetime of the contained objects is managed by the container object.
In composition, the contained objects cannot exist without the container object, and their lifetime is tied to the lifetime of the container.


Sleep Vs Wait Method:
Aspect				sleep()							wait()
Belongs to		Thread class							Object class (every object has this method)
Purpose			Pauses the current thread for a specified time.			Pauses the thread until another thread calls notify() or notifyAll().
Thread Ownership	Does not release any locks.					Releases any locks the thread holds on the object.
Usage Context		General purpose (e.g., introducing delays, rate limiting).	Synchronization (e.g., waiting for a condition to be met).
Exception		Throws InterruptedException when interrupted.			Throws InterruptedException when interrupted.
Return Control		Automatically resumes after the time period.			Resumes when notified by another thread (notify()/notifyAll()).


Yeild Method in thread class
The yield() method is a way to suggest to the thread scheduler that the current thread is willing to relinquish its CPU time and allow other threads to run. 
However, itâ€™s only a suggestion, and the scheduler may choose to ignore it. It is primarily used in cooperative multitasking systems where 
threads voluntarily give up their CPU time.


Hibernate Caching:
 Summary of Caching Types in Hibernate
Type of Cache		Scope							Data Cached						Enabled By Default
First-Level Cache	Session level (per session)				Entities, collections						Yes
Second-Level Cache	SessionFactory level (shared across sessions)		Entities, collections, query results				No (must be configured)
Query Cache		SessionFactory level					Query results							No (must be configured)
ðŸ’¡ Conclusion
First-Level Cache is automatically enabled and is tied to the session's lifecycle. It reduces the number of database hits within a session by caching entities.
Second-Level Cache is optional and configured for performance optimization across multiple sessions. It can cache entities, collections, and query results at the session factory level.
Query Cache helps further optimize performance by caching entire result sets of queries.
By leveraging caching in Hibernate, applications can reduce database load and improve performance, especially in scenarios where the same data or queries are accessed frequently.


Here are the most commonly used libraries for enabling the second-level cache in Hibernate:

EhCache: Best for most applications, simple configuration, and good for in-memory caching.
Infinispan: Ideal for distributed and highly scalable caching needs.
OSCache: Lightweight and easy to use but not as feature-rich.
Redis: Excellent for distributed caching and persistence, especially for cloud-based systems.
Hazelcast: Great for large-scale, distributed caching in clustered environments.
Caffeine: Caffeine is a high-performance in-memory caching library that provides a fast and efficient caching solution for Hibernate. It supports various features such as expiration policies, eviction policies, and asynchronous loading.


Spring Transaction Propagation types
Propagation Type		If Transaction Exists			If Transaction Does Not Exist
REQUIRED			Join the current tx			Start a new tx
REQUIRES_NEW			Suspend current tx, start a new one	Start a new tx
SUPPORTS			Join current tx				Execute non-transactionally
NOT_SUPPORTED			Suspend current tx			Execute non-transactionally
NEVER				Throw exception				Execute non-transactionally
MANDATORY			Join current tx				Throw exception

Java 17 : Records
 What are the Records in Java?
Records is a new language feature introduced in Java 14 and finalised in Java 16. A record is a special type of class in Java that allows us to define classes that act as transparent carriers for immutable data. Records can be used to replace traditional POJOs, which are often verbose and require a lot of boilerplate code.
This is how we can define the records
public record Vehicle(String make, String model, int year) {}

The fields of a record are implicitly final, which means that once a record instance is created, the data it contains cannot be changed.
Records provide several built-in methods for common operations such as constructors, getters,equals(), hashCode(), and toString(). Like a regular class, methods inside the record can be extended to provide a custom implementation.
Records allow you to define a Compact constructor which omits the parameter list, assuming the same parameters as the record components. Within this constructor, you can include validation or normalization logic for the fields.
public record Vehicle(String make, String model, int year) {

    // Compact constructor
    public Vehicle {
        if (year < 1886) { // The first car was made in 1886
            throw new IllegalArgumentException("Invalid year");
        }
        make = make.trim();
        model = model.trim();
    }
}
Records are ideal for creating simple data-carrier classes, such as DTOs (Data Transfer Objects), value objects in domain-driven design, tuples, and more. Records are serializable by default, provided that all their components are serializable.

Java 17 : Sealed Class
Sealed classes are a new language feature introduced in Java 17 as part of JEP 409. They provide a way to restrict the subclasses that can extend a class or implement an interface. This feature is useful to create more robust and maintainable code and to define a closed hierarchy of types.
Sealed Classes allow you to specify a limited set of subclasses that can extend a given class or implement an interface.
Ex: public sealed abstract class Vehicle permits Car, Truck, Motorcycle {........ 
How Sealed classes are different from final classes?
	Final Classes in Java cannot be inherited at all. It can be used when a class should never be extended.
	Sealed Classes can be inherited, but only by a predefined set of classes. It is used when you want to allow inheritance, but only for specific classes.

Java 17 : InstanceOf Operator enhancement:
How does the pattern matching for instanceof work in Java 17?
Pattern Matching for instanceof in Java 17 enhances the instanceof operator and eliminates the need for type casting and checking.

Traditional approach:

if (obj instanceof Car) {
    Car str = (Car) obj;
    // Use car object here 
}

With pattern matching in java 17 ,for instanceof:

if (obj instanceof Car car) {
    // Use car object here without typecasting it.
}
As you can notice, it makes the code more concise but also enhances readability and reduces the possibility of errors, such as incorrect casting.

